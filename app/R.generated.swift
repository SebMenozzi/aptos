//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `Shapiro Bold Wide.ttf`.
    static let shapiroBoldWideTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Shapiro Bold Wide", pathExtension: "ttf")
    /// Resource file `Shapiro Bold.ttf`.
    static let shapiroBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Shapiro Bold", pathExtension: "ttf")
    /// Resource file `Shapiro ExtraBold Wide.ttf`.
    static let shapiroExtraBoldWideTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Shapiro ExtraBold Wide", pathExtension: "ttf")
    /// Resource file `Shapiro Medium.ttf`.
    static let shapiroMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Shapiro Medium", pathExtension: "ttf")
    /// Resource file `Shapiro Semi Wide.ttf`.
    static let shapiroSemiWideTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Shapiro Semi Wide", pathExtension: "ttf")
    /// Resource file `Shapiro Semi.ttf`.
    static let shapiroSemiTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Shapiro Semi", pathExtension: "ttf")

    /// `bundle.url(forResource: "Shapiro Bold Wide", withExtension: "ttf")`
    static func shapiroBoldWideTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shapiroBoldWideTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shapiro Bold", withExtension: "ttf")`
    static func shapiroBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shapiroBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shapiro ExtraBold Wide", withExtension: "ttf")`
    static func shapiroExtraBoldWideTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shapiroExtraBoldWideTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shapiro Medium", withExtension: "ttf")`
    static func shapiroMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shapiroMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shapiro Semi Wide", withExtension: "ttf")`
    static func shapiroSemiWideTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shapiroSemiWideTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shapiro Semi", withExtension: "ttf")`
    static func shapiroSemiTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shapiroSemiTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `Shapiro-BoldWide`.
    static let shapiroBoldWide = Rswift.FontResource(fontName: "Shapiro-BoldWide")
    /// Font `Shapiro-Bold`.
    static let shapiroBold = Rswift.FontResource(fontName: "Shapiro-Bold")
    /// Font `Shapiro-ExtraBoldWide`.
    static let shapiroExtraBoldWide = Rswift.FontResource(fontName: "Shapiro-ExtraBoldWide")
    /// Font `Shapiro-Medium`.
    static let shapiroMedium = Rswift.FontResource(fontName: "Shapiro-Medium")
    /// Font `Shapiro-SemiWide`.
    static let shapiroSemiWide = Rswift.FontResource(fontName: "Shapiro-SemiWide")
    /// Font `Shapiro-Semi`.
    static let shapiroSemi = Rswift.FontResource(fontName: "Shapiro-Semi")

    /// `UIFont(name: "Shapiro-Bold", size: ...)`
    static func shapiroBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: shapiroBold, size: size)
    }

    /// `UIFont(name: "Shapiro-BoldWide", size: ...)`
    static func shapiroBoldWide(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: shapiroBoldWide, size: size)
    }

    /// `UIFont(name: "Shapiro-ExtraBoldWide", size: ...)`
    static func shapiroExtraBoldWide(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: shapiroExtraBoldWide, size: size)
    }

    /// `UIFont(name: "Shapiro-Medium", size: ...)`
    static func shapiroMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: shapiroMedium, size: size)
    }

    /// `UIFont(name: "Shapiro-Semi", size: ...)`
    static func shapiroSemi(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: shapiroSemi, size: size)
    }

    /// `UIFont(name: "Shapiro-SemiWide", size: ...)`
    static func shapiroSemiWide(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: shapiroSemiWide, size: size)
    }

    static func validate() throws {
      if R.font.shapiroBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Shapiro-Bold' could not be loaded, is 'Shapiro Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.shapiroBoldWide(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Shapiro-BoldWide' could not be loaded, is 'Shapiro Bold Wide.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.shapiroExtraBoldWide(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Shapiro-ExtraBoldWide' could not be loaded, is 'Shapiro ExtraBold Wide.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.shapiroMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Shapiro-Medium' could not be loaded, is 'Shapiro Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.shapiroSemi(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Shapiro-Semi' could not be loaded, is 'Shapiro Semi.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.shapiroSemiWide(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Shapiro-SemiWide' could not be loaded, is 'Shapiro Semi Wide.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
